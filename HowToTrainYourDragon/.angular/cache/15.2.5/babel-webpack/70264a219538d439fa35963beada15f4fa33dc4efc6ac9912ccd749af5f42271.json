{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet LoginComponent = class LoginComponent {\n  constructor(router, alertService) {\n    this.router = router;\n    this.alertService = alertService;\n    this.id = 'default-alert';\n    this.fade = true;\n    this.alerts = [];\n  }\n  ngOnInit() {\n    // subscribe to new alert notifications\n    this.alertSubscription = this.alertService.onAlert(this.id).subscribe(alert => {\n      // clear alerts when an empty alert is received\n      if (!alert.message) {\n        // filter out alerts without 'keepAfterRouteChange' flag\n        this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\n        // remove 'keepAfterRouteChange' flag on the rest\n        this.alerts.forEach(x => delete x.keepAfterRouteChange);\n        return;\n      }\n      // add alert to array\n      this.alerts.push(alert);\n      // auto close alert if required\n      if (alert.autoClose) {\n        setTimeout(() => this.removeAlert(alert), 3000);\n      }\n    });\n    // clear alerts on location change\n    this.routeSubscription = this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        this.alertService.clear(this.id);\n      }\n    });\n  }\n  ngOnDestroy() {\n    // unsubscribe to avoid memory leaks\n    this.alertSubscription.unsubscribe();\n    this.routeSubscription.unsubscribe();\n  }\n  removeAlert(alert) {\n    // check if already removed to prevent error on auto close\n    if (!this.alerts.includes(alert)) return;\n    if (this.fade) {\n      // fade out alert\n      alert.fade = true;\n      // remove alert after faded out\n      setTimeout(() => {\n        this.alerts = this.alerts.filter(x => x !== alert);\n      }, 250);\n    } else {\n      // remove alert\n      this.alerts = this.alerts.filter(x => x !== alert);\n    }\n  }\n  cssClass(alert) {\n    if (!alert) return;\n    const classes = ['alert', 'alert-dismissible', 'mt-4', 'container'];\n    const alertTypeClass = {\n      [AlertType.Success]: 'alert-success',\n      [AlertType.Error]: 'alert-danger',\n      [AlertType.Info]: 'alert-info',\n      [AlertType.Warning]: 'alert-warning'\n    };\n    if (alert.type !== undefined) {\n      classes.push(alertTypeClass[alert.type]);\n    }\n    if (alert.fade) {\n      classes.push('fade');\n    }\n    return classes.join(' ');\n  }\n};\n__decorate([Input()], LoginComponent.prototype, \"id\", void 0);\n__decorate([Input()], LoginComponent.prototype, \"fade\", void 0);\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":"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","names":["Component","LoginComponent","constructor","router","alertService","ngOnInit","alertSubscription","onAlert","id","subscribe","alert","message","alerts","filter","x","keepAfterRouteChange","forEach","push","autoClose","setTimeout","removeAlert","routeSubscription","events","event","NavigationStart","clear","ngOnDestroy","unsubscribe","includes","fade","cssClass","classes","alertTypeClass","AlertType","Success","Error","Info","Warning","type","undefined","join","__decorate","Input","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Nicolas\\Downloads\\SCUOLA\\info\\ANGULAR\\DragonTrainerSecondaProva\\DragonTrainer\\HowToTrainYourDragon\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  @Input() id = 'default-alert';\n  @Input() fade = true;\n\n  alerts: Alert[] = [];\n  alertSubscription!: Subscription;\n  routeSubscription!: Subscription;\n\n  constructor(private router: Router, private alertService: AlertService) { }\n\n  ngOnInit() {\n      // subscribe to new alert notifications\n      this.alertSubscription = this.alertService.onAlert(this.id)\n          .subscribe(alert => {\n              // clear alerts when an empty alert is received\n              if (!alert.message) {\n                  // filter out alerts without 'keepAfterRouteChange' flag\n                  this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\n\n                  // remove 'keepAfterRouteChange' flag on the rest\n                  this.alerts.forEach(x => delete x.keepAfterRouteChange);\n                  return;\n              }\n\n              // add alert to array\n              this.alerts.push(alert);\n\n              // auto close alert if required\n              if (alert.autoClose) {\n                  setTimeout(() => this.removeAlert(alert), 3000);\n              }\n         });\n\n      // clear alerts on location change\n      this.routeSubscription = this.router.events.subscribe(event => {\n          if (event instanceof NavigationStart) {\n              this.alertService.clear(this.id);\n          }\n      });\n  }\n\n  ngOnDestroy() {\n      // unsubscribe to avoid memory leaks\n      this.alertSubscription.unsubscribe();\n      this.routeSubscription.unsubscribe();\n  }\n\n  removeAlert(alert: LoginComponent) {\n      // check if already removed to prevent error on auto close\n      if (!this.alerts.includes(alert)) return;\n\n      if (this.fade) {\n          // fade out alert\n          alert.fade = true;\n\n          // remove alert after faded out\n          setTimeout(() => {\n              this.alerts = this.alerts.filter(x => x !== alert);\n          }, 250);\n      } else {\n          // remove alert\n          this.alerts = this.alerts.filter(x => x !== alert);\n      }\n  }\n\n  cssClass(alert: Alert) {\n      if (!alert) return;\n\n      const classes = ['alert', 'alert-dismissible', 'mt-4', 'container'];\n              \n      const alertTypeClass = {\n          [AlertType.Success]: 'alert-success',\n          [AlertType.Error]: 'alert-danger',\n          [AlertType.Info]: 'alert-info',\n          [AlertType.Warning]: 'alert-warning'\n      }\n\n      if (alert.type !== undefined) {\n          classes.push(alertTypeClass[alert.type]);\n      }\n\n      if (alert.fade) {\n          classes.push('fade');\n      }\n\n      return classes.join(' ');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}